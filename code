#include <iostream>
using namespace std;

class Queue
{
private:
	int front;
	int back;
	int n;
	int* q;
public:
	Queue()  //konstruktorius 
	{
		front = -1;
		back = -4;
		n = 5;
		q = new int[n];
	}

	~Queue() { delete[] q; }

	bool full() {
		if (back == n - 1 && front == 0 || back == front - 1) return true;
		return false;
	}

	void enqueue(int value)
	{
		if (full()) cout << "Queue is full" << endl;
		else {
			if (front == -1) {
				front=0;
				q[front] = value;
				back = front;
			}
			else {
				if (back == n - 1 && front != 0) {
					back = 0;
					q[back] = value;
				}
				else {
					back++;
					q[back] = value;
				}
			}
		}
	}

	void dequeue() {
		if (isEmpty()) cout << "Queue is empty" << endl;
		else {
			if (front == back) {
				q[front] = -1;
				front = -1;
				back = -4;
			}
			else if (front != n-1){
				q[front] = -1;
				front++;
			}
			else {
				q[front] = -1;
				front = 0;
			}
		}
	}

	void display()
	{
		if (isEmpty()) cout << "Queue is empty" << endl;
		else {
			if (front <= back) {
			for (int i = front; i <= back; i++)
				cout << q[i] << " ";
			cout << endl;
			}
			else {
				for (int i = front; i < n; i++)
					cout << q[i] << " ";
				for (int i = 0; i <= back; i++)
					cout << q[i] << " ";
				cout << endl;
			}
		}
	}

	void peek() {
		if (isEmpty()) cout << "Queue is empty!" << endl;
		else
		cout << q[front] << endl;
	}

	bool isEmpty() {
		if (front == -1) return true;
		return false;
	}

	void clear() {
		front = -1;
		back = -4;
	}


	int size() {
		if (isEmpty()) return 0;
		else {
			if (front < back) return back - front + 1;
			else return n - front + back + 1;
		}
	}

	void reverse() {
		int* a = new int[n];
		int k = 0;
		if (front < back) {
			for (int i = front; i <= back; i++) {
				a[k] = q[i];
				k++;
			}	
		}
		else {
			for (int i = front; i < n; i++) {
				a[k] = q[i];
				k++;
			}
			for (int i = 0; i <= back; i++) {
				a[k] = q[i];
				k++;
			}
		}
			
		int j = 0;
		for (int i = back; i >= front; i--) {
			q[i] = a[j];
			j++;
		}
		delete[] a;
	}

};

class menu {
private:
	Queue qu;
public:
	void Commands(int a) {
		if (a == 0) DisplayFunc();
		if (a == 1) {
			int aa;
			cout << "iveskite skaiciu" << endl;
			cin >> aa;
			qu.enqueue(aa);
		}
		if (a == 2)
			qu.dequeue();
		if (a == 3)
			qu.peek();
		if (a == 4)
			qu.display();
		if (a == 5)
			qu.clear();
		if (a == 6)
			cout << qu.size() << endl;
		if (a == 7)
			qu.reverse();
	}

	void DisplayFunc() {
		cout << "visos galimos operacijos:\n1) enqueue() - prideti elementa,\n2) dequeue() - pasalinti elementa,\n3) peek() - perziureti pirma elementa,\n4) display() - spausdinti eile,\n5) clear() -  isvalyti eile,\n6) size() - parodyti eiles dydi,\n7) reverse() - apsukti eile." << endl;
	}

};

int main()
{
	menu a;
	while (true) {
		int b;
		cout << "MENU :: iveskite 0, jei norite pamatyti galimas funkcijas, 8 - iseiti  ::" << endl;
		cin >> b;
		if (b == 8) break;
		cout << endl;
		a.Commands(b);
		cout << endl;
	}
	system("pause");
	return 0;
}

